apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mysql
  name: mysql
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  # older pods are delete after giving 40 seconds to new pods to be actually running the spring service
  minReadySeconds: 30
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: mysql
  #recreate will first delete old and then create fresh, in case of DB we cna not have data in tow different containers
  #during upgrade of DB it is not good approach to let data enter in multiple containers     
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        args:
          - "--ignore-db-dir=lost+found" #CHANGE 
        env:
        - name: MYSQL_DATABASE
          value: pranaam-kubernetes-db
        - name: MYSQL_PASSWORD
          value: jaishreeram
        - name: MYSQL_ROOT_PASSWORD
          value: jaishreeram
        - name: MYSQL_USER
          value: pranaam-kubernetes-user
        imagePullPolicy: IfNotPresent
        #container name, directly linked to 
        name: mysql
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  ports:
  - name: "3306"
    port: 3306
    targetPort: 3306
  type: ClusterIP  
#  type: LoadBalancer  
  selector:
    app: mysql
status:
  loadBalancer: {}